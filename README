

-------------
- Key Variables
-------------

ARCH - Your architecture, something like x86 or x86_64
WS_VERSION - Wireshark version, something like 1.2.6

-------------
- Windows Install
-------------

Move dist\fast-ARCH.dll to C:\Program Files\Wireshark\plugins\WS_VERSION

-------------
- Linux Install
-------------

- local install

cp dist/fast-ARCH.so $HOME/wireshark/plugins/packet-fast.so

See "Linux Capture Permissions" for how to run Wireshark as a user if you
can't already. If Wireshark is invoked with 'sudo', this install method will
not work.


- global install

Place dist/fast-ARCH.so into /usr/lib/wireshark/plugins/WS_VERSION

-------------
- Seeing Something Happen
-------------

At present, the plugin decodes a fixed template.
You can generate that fixed template with the test client program.
This only works on POSIX platforms.

   cd test
   make
   ./cur-tshark.sh  # This is how to use TShark listening on localhost
                    # The GUI Wireshark can also be used of course
   ./cur-client.sh  # This sends some simple packets, look inside to see how

Wireshark will see traffic on the loopback interface (lo).

Try constructing your own packets with ./client, using commands in
./cur-client.sh as a reference.

With the -h flag, you can shoot packets at a different host. Obviously
Wireshark must be listening on something other than loopback on the other
host. This is particularly useful for seeing the mock FAST traffic dissected
on a Windows machine.

-------------
- Building
-------------

Before you can build the plugin, you will need a built version of the
Wireshark source tree somewhere.  You can get it from:
http://www.wireshark.org/download.html

Extract the package to some folder somewhere, then run:
./configure; make

note that you DO NOT need to run 'make install' unless you don't have a
version of wireshark isntalled already, obviously.
If you do install from source, remember to do a 'sudo ldconfig' afterwards
to refresh your shared object cache or wireshark will not be able to find
all its shared objects.

It should work normally, unless it needs a package that you don't have, in
which case, install it!

-------------

Then in your source folder of this project, run our configure script.
It takes two parameters, the path to the root folder of the wireshark
source you just built, and a path to the place you want the output shared
object to be placed at:

./configure path_to_wireshark_source [path_to_so_output_folder]

The output path will default to ~/.wireshark/plugins, as this is the typical
place for wireshark's plugin folder to be located

-------------

Then you can run make:
make

Note that typically, Wireshark's plugin folder is ~/.wireshark/plugins
so you can just have the .so built there and it should work

Another note:
make clean
will clean up the detritus of the build process, but not the important
output files or the Makefile
make distclean
will clean up the detritus of the build process (INCLUDING the output .so file)
and remove the generated Makefile, so you will have to run configure to be
able to build again.

-------------
Building under windows
-------------
Like Linux, you need a Built version of wireshark to run against. You also 
Will need a win32 Environment for compilation. See 
http://www.wireshark.org/docs/wsdg_html_chunked/ChSetupWin32.html 
For details. This will tell you how to get a working build environment,
including wirehshark source, a version of microsoft's C compiler and linker, 
and cygwin. Once complete return to this readme.

Once you can build wireshark, you will need
Our source code, which if your reading this We can assume you can find it.
Our source code MUST go in the /plugins/fast/ directory of your wireshark source to build.

You will also need a built win32 static library(.lib) of each libxml2, iconv, 
and Zlib, as well as the includes for iconv(you need the BUILT iconv include.h, 
NOT source include directory) and libxml2

These includes should be at 
C:\wireshark-win32-libs\libxml2-2.7.6.win32\include
and 
C:\wireshark-win32-libs\iconv-1.9.2.win32\include 
respectively, when you have aquired them. 

Unfortunately, these paths are hardcoded, you may change the paths in the 
".c.obj::" Rule if you must. Make sure the paths are prefixed with a -I 
if you change them, otherwise the compiler will now know where to include the headers from.

The .lib files go into our folder with our source to link with, 
IE C:.../wireshark-source/plugins/fast.
You can change this by altering the 
link -dll /out:$(PLUGIN_NAME).dll
entry, by replacing the '.' before the \X.lib\ with your new location, But make sure you
have the right path or the module with either fail to link or fail upon loading after start-up!

In addition, you may consider making the changes listed in Section 3 of README.plugins in 
the \doc folder of the wireshark soruce, but this only makes wireshark Build our plugin 
when it builds itself, so not really needed.

Once wireshark is set up, incldues and libraries set, and everything is in the proper places, 
simple go into our directory, and type 
nmake -f makefile.nmake
This will make the files. As a windows use you are are wanting the .dll made by this process.
Take it, and put it in the /plugins/version/folder of your wireshark folder, where the
rest of the external plugin dlls exist, and run wireshark. Wireshark will do the rest itself.


-------------
- Linux Capture Permissions
-------------

I couldn't seem to get wireshark to recognize user-added plugins when it
was running as root, which is a bad idea anyway...
The way i got wireshark to capture any interface as non-root was to allow
the dumpcap program access to listen on any network interfaces:
sudo setcap 'CAP_NET_RAW+eip CAP_NET_ADMIN+eip' `which dumpcap`

However this is also not the most secure thing in the world.  A good summary
of different approaches is on wiresharks wiki here:
http://wiki.wireshark.org/CaptureSetup/CapturePrivileges

